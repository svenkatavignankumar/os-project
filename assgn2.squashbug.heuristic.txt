Heuristic 1: 
Command 1: sb -s <PID>  
Command 2: sb -s <PID> -suggest

Idea:
1. Assume the PID given is x and level of x from root is l. Now assume the proccess tree to be cut at depth l. 
2. We go from x to root. Let CPU time for x as t1 and parent of x as par(x). 
3. We get the count of nodes in the subtree rooted at x with CPU time greater than 95% of t1. Let this count be c1. We assign this value to par(x).
4. Now we go a level up and find number of nodes in the subtree rooted at par(par(x)) with CPU time greater than 95% of t1. We assign this count to par(par(x))
5. We continue this process till we get a node where the count of parent and child is similar(similar is some kind of difference is still acceptable).
6. From this we can say that the child is the malware because the the parent's other children are not having count as much as this child, which implies 
   the proccesses in this child's subtree are using more CPU than any other child of the parent.

Pros:
1. Accurately finds the malware process.

Cons:
1. Takes long time to calculate the count of nodes in the subtree with CPU time greater than 95% of t1. Time complexity is exponential.

Assumptions:
1. The PID given belongs to one of the child/grandchild/nth grandchild of malware else the results suggest will be wrong.

Heuristic 2:
Command 1: sb <PID>
command 2: sb <PID> -suggest

Idea:
1. Assume PID of given proccess is x.
2. We calculate the total CPU Jiffies at time t, t+1. Let it be t1, t2.
3. We will also calculate the CPU time used(stime+utime) by process x at t, t+1. Let it be t3, t4.
4. We calculate the CPU usage of process x as (t4-t3)/(t2-t1). Let this by c1.
5. Now we go to par(x) and we see number if CPU util of par(x) is <= 0.5*c1.
6. If yes we will go through immediate childs of par(x) and count number of proccess having CPU util >= 0.5*c1. Let this count be c2.
7. similarly we go till node and store the counts. 
8. We return the maximum count process as suspect process.

Pros:
1. Accurately finds the malware process.

Cons:
1. May not be as accurate as Heuristic 1.

Assumptions:
1. The PID given belongs to one of the child/grandchild/nth grandchild of malware else the results suggest will be wrong.


Heuristic 2 will give answer because if some process has CPU util <= 0.5 * c1 and it has more children with CPU util >= 0.5*c1 then it might be the malware process
as we already assumed that the PID given belongs to one of the child/grandchild/nth grandchild of malware. So they will have much CPU utilisation than the other procceses.
